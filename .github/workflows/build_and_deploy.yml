name: "Build and deploy"
on:
    push:
        branches:
            - master

jobs:
    build_and_deploy:
        name: Build and deploy
        runs-on: ubuntu-latest
        env:
            DOCKER_REGISTRY: 'docker.pkg.github.com'
            DOCKER_LOGIN: ${{ github.actor }}
            DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        steps:
#            -   name: Check requirements
#                run: |
#                    [[ -z "$DOCKER_REGISTRY" ]] && { echo '$DOCKER_REGISTRY is empty'; exit 1; }
#                    [[ -z "$DOCKER_LOGIN" ]] && { echo '$DOCKER_LOGIN is empty'; exit 1; }
#                    [[ -z "$DOCKER_PASSWORD" ]] && { echo '$DOCKER_PASSWORD is empty'; exit 1; }
#                    [[ -z "$SECRETS_DEPLOY_HOST" ]] && { echo 'Secret DEPLOY_HOST is empty'; exit 1; }
#                    [[ -z "$SECRETS_DEPLOY_USERNAME" ]] && { echo 'Secret DEPLOY_USERNAME is empty'; exit 1; }
#                    [[ -z "$SECRETS_DEPLOY_KEY" ]] && { echo 'Secret DEPLOY_KEY is empty'; exit 1; }
#                env:
#                    SECRETS_DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
#                    SECRETS_DEPLOY_USERNAME: ${{ secrets.DEPLOY_USERNAME }}
#                    SECRETS_DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
#                shell: bash

            -   uses: actions/checkout@v1

            -   name: Prepare env
                run: |
                    repo=$(echo "${{ github.repository }}" | awk -F / '{print $2}')
                    prefix="${DOCKER_REGISTRY}/${{ github.repository }}"
                    suffix=${{ github.run_id }}
                    echo "DOCKER_IMAGE_NGINX=$(echo "${prefix}/${repo}_nginx:${suffix}")" >> $GITHUB_ENV
                    echo "DOCKER_IMAGE_NGINX_LATEST=$(echo "${prefix}/${repo}_nginx:latest")" >> $GITHUB_ENV
                    echo "DOCKER_IMAGE_APP=$(echo "${prefix}/${repo}_app:${suffix}")" >> $GITHUB_ENV
                    echo "DOCKER_IMAGE_APP_LATEST=$(echo "${prefix}/${repo}_app:latest")" >> $GITHUB_ENV
                shell: bash

            -   name: Docker login
                run: docker login -u "${DOCKER_LOGIN}" -p "${DOCKER_PASSWORD}" "${DOCKER_REGISTRY}"

            -   name: Build NGINX image
                if: success()
                run: |
                    docker pull ${DOCKER_IMAGE_NGINX_LATEST} || true
                    docker build --cache-from ${DOCKER_IMAGE_NGINX_LATEST} --tag ${DOCKER_IMAGE_NGINX} --tag ${DOCKER_IMAGE_NGINX_LATEST} -f build/docker/nginx/Dockerfile .
                    docker push ${DOCKER_IMAGE_NGINX}
                    docker push ${DOCKER_IMAGE_NGINX_LATEST}

            -   name: Build APP image
                if: success()
                run: |
                    docker pull ${DOCKER_IMAGE_APP_LATEST} || true
                    docker build --cache-from ${DOCKER_IMAGE_APP_LATEST} --tag ${DOCKER_IMAGE_APP} --tag ${DOCKER_IMAGE_APP_LATEST} --target prod -f build/docker/app/Dockerfile .
                    docker push ${DOCKER_IMAGE_APP}
                    docker push ${DOCKER_IMAGE_APP_LATEST}

            -   id: dotenv
                uses: falti/dotenv-action@v0.2.4
                with:
                    log-variables: true

            -   name: Prepare docker-compose files for deploy
                if: success()
                run: |
                    envsubst < docker-compose.yml > /tmp/docker-compose.yml
                    envsubst < docker-compose.prod.yml > /tmp/docker-compose.prod.yml
                    cat /tmp/docker-compose.yml
                    echo "\n"
                    cat /tmp/docker-compose.prod.yml
                env:
                    DOCKER_COMPOSE_PORT_NGINX: ${{ steps.dotenv.outputs.docker_compose_port_nginx }}
                    DOCKER_COMPOSE_PORT_DB: ${{ steps.dotenv.outputs.docker_compose_port_db }}
                    DOCKER_COMPOSE_PORT_APP: ${{ steps.dotenv.outputs.docker_compose_port_app }}

            -   name: Create remote project dir
                uses: appleboy/ssh-action@master
                with:
                    host: ${{ secrets.DEPLOY_HOST }}
                    username: ${{ secrets.DEPLOY_USERNAME }}
                    key: ${{ secrets.DEPLOY_KEY }}
                    script_stop: true
                    script: |
                        mkdir -p ~/projects/econumo/econumo-backend

            -   name: Upload docker-compose.yml
                uses: garygrossgarten/github-action-scp@release
                with:
                    host: ${{ secrets.DEPLOY_HOST }}
                    username: ${{ secrets.DEPLOY_USERNAME }}
                    privateKey: ${{ secrets.DEPLOY_KEY }}
                    local: "/tmp/docker-compose.yml"
                    remote: "projects/econumo/econumo-backend/docker-compose.yml.${{ github.run_id }}"

            -   name: Upload docker-compose.prod.yml
                uses: garygrossgarten/github-action-scp@release
                with:
                    host: ${{ secrets.DEPLOY_HOST }}
                    username: ${{ secrets.DEPLOY_USERNAME }}
                    privateKey: ${{ secrets.DEPLOY_KEY }}
                    local: "/tmp/docker-compose.prod.yml"
                    remote: "projects/econumo/econumo-backend/docker-compose.prod.yml.${{ github.run_id }}"

            -   name: Reload docker-compose
                uses: appleboy/ssh-action@master
                with:
                    host: ${{ secrets.DEPLOY_HOST }}
                    username: ${{ secrets.DEPLOY_USERNAME }}
                    key: ${{ secrets.DEPLOY_KEY }}
                    script_stop: true
                    script: |
                        rm -f ~/projects/econumo/econumo-backend/docker-compose.yml.backup || true
                        rm -f ~/projects/econumo/econumo-backend/docker-compose.prod.yml.backup || true
                        mv ~/projects/econumo/econumo-backend/docker-compose.yml ~/projects/econumo/econumo-backend/docker-compose.yml.backup  || true
                        mv ~/projects/econumo/econumo-backend/docker-compose.prod.yml ~/projects/econumo/econumo-backend/docker-compose.prod.yml.backup  || true
                        mv ~/projects/econumo/econumo-backend/docker-compose.yml.${{ github.run_id }} ~/projects/econumo/econumo-backend/docker-compose.yml
                        mv ~/projects/econumo/econumo-backend/docker-compose.prod.yml.${{ github.run_id }} ~/projects/econumo/econumo-backend/docker-compose.prod.yml
                        cd ~/projects/econumo/econumo-backend && docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
                        cd ~/projects/econumo/econumo-backend && docker-compose -f docker-compose.yml -f docker-compose.prod.yml exec -T -uwww-data app bin/console doctrine:migrations:migrate --no-interaction

            -   name: Cleanup
                if: success()
                run: |
                    rm -f /tmp/docker-compose*
