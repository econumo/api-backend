name: pipeline
on:
    push:
        branches:
            - master

jobs:
    build:
        name: Build and deploy
        runs-on: ubuntu-latest
        env:
            DOCKER_IMAGE_NGINX: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}/nginx:${{ github.run_id }}
            DOCKER_IMAGE_NGINX_LATEST: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}/nginx:latest
            DOCKER_IMAGE_APP: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}/app:${{ github.run_id }}
            DOCKER_IMAGE_APP_LATEST: ${{ secrets.DOCKER_REGISTRY }}/${{ github.repository }}/app:latest

        steps:
            -   uses: actions/checkout@v1
            -   name: Docker login
                run: docker login -u "${DOCKER_LOGIN}" -p "${DOCKER_PASSWORD}" "${DOCKER_REGISTRY}"
                env:
                    DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
                    DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
                    DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
            -   name: Build NGINX image
                if: success()
                run: |
                    docker pull ${DOCKER_IMAGE_NGINX_LATEST} || true
                    docker build --cache-from ${DOCKER_IMAGE_NGINX_LATEST} --tag ${DOCKER_IMAGE_NGINX} --tag ${DOCKER_IMAGE_NGINX_LATEST} -f build/docker/nginx/Dockerfile .
                    docker push ${DOCKER_IMAGE_NGINX}
                    docker push ${DOCKER_IMAGE_NGINX_LATEST}
            -   name: Build APP image
                if: success()
                run: |
                    docker pull ${DOCKER_IMAGE_APP_LATEST} || true
                    docker build --cache-from ${DOCKER_IMAGE_APP_LATEST} --tag ${DOCKER_IMAGE_APP} --tag ${DOCKER_IMAGE_APP_LATEST} -f build/docker/app/Dockerfile .
                    docker push ${DOCKER_IMAGE_APP}
                    docker push ${DOCKER_IMAGE_APP_LATEST}

            -   name: Deploy
                if: success()
            -   uses: actions/checkout@v1
            -   uses: falti/dotenv-action@v0.2.4
            -   name: Prepare docker-compose.yml
                if: success()
                run: |
                    echo "${{ steps.dotenv.outputs.docker_compose_port_nginx }}"
                    echo "${DOCKER_COMPOSE_PORT_NGINX}"
                    envsubst < docker-compose.production.yml > /tmp/docker-compose.yml
                    cat /tmp/docker-compose.yml
                env:
                    DOCKER_COMPOSE_PORT_NGINX: ${{ steps.dotenv.outputs.docker_compose_port_nginx }}
                    DOCKER_COMPOSE_PORT_DB: ${{ steps.dotenv.outputs.docker_compose_port_db }}
                    DOCKER_COMPOSE_PORT_APP: ${{ steps.dotenv.outputs.docker_compose_port_app }}
            -   name: Deploy
                uses: appleboy/scp-action@master
                with:
                    host: ${{ secrets.DEPLOY_HOST }}
                    username: ${{ secrets.DEPLOY_USERNAME }}
                    key: ${{ secrets.DEPLOY_KEY }}
                    source: "/tmp/docker-compose.yml"
                    target: "${{ github.repository }}/"
            -   uses: appleboy/ssh-action@master
                with:
                    host: ${{ secrets.DEPLOY_HOST }}
                    username: ${{ secrets.DEPLOY_USERNAME }}
                    key: ${{ secrets.DEPLOY_KEY }}
                    script_stop: true
                    script: |
                        mkdir -p ${{ github.repository }}
                        cd ${{ github.repository }} && docker-compose up -d
#                        cd ${{ github.repository }} && docker-compose exec -uwww-data app bin/console doctrine:migration:migrate -n

#    test:
#        name: Test
#        runs-on: ubuntu-latest
#        env:
#            DOCKER_IMAGE: ${GITHUB_REPOSITORY}:${GITHUB_RUN_ID}
#            DOCKER_IMAGE_LATEST: ${GITHUB_REPOSITORY}:latest
#
#        steps:
#            - name: Checkout
#              uses: actions/checkout@v1
#            - name: Install Task
#              uses: Arduino/actions/setup-taskfile@master
#            - name: Docker login
#              run: docker login -u "${DOCKER_LOGIN}" -p "${DOCKER_PASSWORD}" "${DOCKER_REGISTRY}"
#              env:
#                  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
#                  DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
#                  DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
#            - name: Run tests
#              if: success()
#              run: echo 111
